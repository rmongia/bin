#!/usr/bin/env python2.7
#
# Copyright (c) 2010 and onwards INSTART, INC. All rights reserved.
#
# Primary: atumbde
# Secondary: amarwah
#
import logging
import argparse
import re
import os
import urllib2
import json
import subprocess
import service.sensei.smcli.Git as Git

#------------------------------------------------------------------------------

log = logging.getLogger(__name__)

#------------------------------------------------------------------------------
def local_forward_revs():
  output = subprocess.check_output(
    [ '/usr/bin/git',
      'cherry',
      'HEAD~1'])
  rev_list = output.split()
  for r in rev_list:
    if r == '-':
      log.error('Local repository is out of sync with remote.\n')
      sys.exit(1)
  local_revs = [rev for rev in rev_list if rev != '+']
  revs = []
  for r in local_revs:
    review_id = get_review_id(r)
    log.debug ('Checking review id %s' % review_id)
    if review_id is not None:
      has_ship_it = review_has_ship_it(review_id)
    else:
      has_ship_it = False

    log.debug('Revision %s, review_id: %s, has_ship_it: %s' % (
      r, review_id, has_ship_it))
    record = (r, review_id, has_ship_it)
    revs.append(record)
  return revs

#------------------------------------------------------------------------------
def get_review_id(revision):
  (autor, email, commit_log) = git.commit_log(revision)
  match = re.search("Review ?: ?https://reviewboard.insnw.net/r/(\d+)/?",\
                    commit_log, re.IGNORECASE)
  if not match:
    return None
  review_id = match.group(1)
  log.debug('Revision %s review id is %s' % (revision, review_id))
  return review_id

#------------------------------------------------------------------------------
def rb_GET(path, auth, options=None):
  RB_API ="https://reviewboard.insnw.net/api"
  if options:
    path = "%s?%s" % (path, '&'.join(['%s=%s' % (opt) for opt in options.items()]))
  url = '%s/%s' % (RB_API, path)
  req = urllib2.Request(url, headers={'Cookie': auth})
  resp = urllib2.urlopen(req)
  return json.load(resp)

#------------------------------------------------------------------------------
def review_has_ship_it(review_id):
  log.debug("Checking status of review id %s" % review_id)
  cookie_file = file(
  os.path.join(os.environ['HOME'], '.post-review-cookies.txt'), 'r').read()
  match = re.search('(reviewboard.insnw.net.*)$', cookie_file, re.MULTILINE)
  if not match:
    raise RuntimeError('No certs to use with revieboard')
  auth = 'rbsessionid=%s' % match.group(1).split('\t')[6]
  response = rb_GET('review-requests/%s/reviews' % review_id, auth)
  reviews = response['reviews']
  for review in reviews:
    if review['ship_it']:
      return True;
  return False

#------------------------------------------------------------------------------
def amend_review(post_review_path, review_id) :
  log.info('Amending review id %s' % review_id)
  subprocess.check_call(
    [ post_review_path,
      '--parent=HEAD~1',
      '--guess-description',
      '--guess-summary',
      '--diff-only',
      '--review-request-id=%s' % review_id,
      '--publish'])

#------------------------------------------------------------------------------
def post_review(revision, post_review_path, reviewers, reviewer_group):
  log.info("Posting review for commit %s" % revision)
  if len(reviewers) <= 0:
    log.error("Missing reviewer names")
    return 1
  output = subprocess.check_output(
    [ post_review_path,
      '--guess-summary',
      '--guess-description',
      "--target-people=%s" % ",".join(reviewers),
      "--target-groups=%s" % reviewer_group,
      '--publish',
      '--parent=HEAD~1'
      ]
    )
  lines = output.splitlines();
  url = lines[-1]
  return url

#------------------------------------------------------------------------------
def append_review_url_to_git_log(revision, url):
  (author, email, commit_log) = git.commit_log(revision)
  new_log = commit_log + "Review: %s" % url
  return git.amend_commit_msg(new_log)

def review(args):

  local_revs = local_forward_revs()

  # important to not modify commits that are already pushed
  if len(local_revs) == 0:
    log.info('No local commits to review.')

  #post review
  (revision, review_id, has_ship_it) = local_revs[0]

  if review_id is None:
    if not args.reviewers:
      log.error('List of reviewers (-r) is required')
      return 1
    url = post_review(revision,
                            args.post_review_path,
                            args.reviewers,
                            args.reviewer_groups)
    if not url:
      return 1
    # amend commit with review url
    log.info('Posted review: %s' % url)
    rc = append_review_url_to_git_log(revision, url)
    if rc != 0:
      return 1
  else :
    # post it even if the review has ship it
    amend_review(args.post_review_path, review_id)

  return 0


if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('-r', '--reviewers',
                      default=[],
                      action='append',
                      help='Reviewer Name (-r user1,user2 or -r user1 -r user2)',
                      metavar='<Reviewer>')
  parser.add_argument('-g', '--reviewer_groups',
                      default="dev",
                      help='Reviewer groups',
                      metavar='<Reviewer groups>')

  parser.add_argument('--git_path',
                      default = '/usr/bin/git',
                      nargs = 1,
                      help = 'Full path name to git command',
                      metavar = '<git path>')

  parser.add_argument('--post_review_path',
                      default = '/usr/local/bin/post-review',
                      nargs = 1,
                      help = 'Full path to post-review command',
                      metavar = '<post-review-path>')
  parser.add_argument('-v', '--verbose',
                      default = False,
                      action = 'store_true',
                      help = 'verbose mode')

  args = parser.parse_args();

  level = logging.INFO
  if args.verbose:
    level = logging.DEBUG
  logging.basicConfig(level=level, format='%(levelname)s: %(message)s')
  git = Git.Git(args.git_path)
  review(args);
